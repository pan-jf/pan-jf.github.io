{"meta":{"title":"七月七日晴","subtitle":"","description":"","author":"pan-jf","url":"https://pan-jf.github.io","root":"/"},"pages":[{"title":"","date":"2022-08-23T09:04:28.577Z","updated":"2022-08-23T09:04:28.577Z","comments":true,"path":"categories/index.html","permalink":"https://pan-jf.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-08-24T02:57:48.819Z","updated":"2022-08-24T02:57:48.819Z","comments":true,"path":"about/index.html","permalink":"https://pan-jf.github.io/about/index.html","excerpt":"","text":""},{"title":"","date":"2022-08-23T09:04:40.619Z","updated":"2022-08-23T09:04:40.619Z","comments":true,"path":"tags/index.html","permalink":"https://pan-jf.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机总线系统由（）组成","slug":"软件设计师/计算机基本工作原理/5","date":"2022-09-01T08:55:22.000Z","updated":"2022-09-01T06:27:08.208Z","comments":true,"path":"2022/09/01/软件设计师/计算机基本工作原理/5/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/5/","excerpt":"","text":"三总线结构的计算机总线系统由（）组成 A、CPU总线、内存总线和IO总线 B、数据总线、地址总线和控制总线 C、系统总线、内部总线和外部总线 D、串行总线、并行总线和PCI总线 解析选B 总线线路可以被归为三类 数据总线 地址总线 控制总线","categories":[{"name":"计算机基本工作原理","slug":"计算机基本工作原理","permalink":"https://pan-jf.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"总线","slug":"总线","permalink":"https://pan-jf.github.io/tags/%E6%80%BB%E7%BA%BF/"}]},{"title":"有符号定点小数","slug":"软件设计师/计算机基本工作原理/6","date":"2022-09-01T08:55:22.000Z","updated":"2022-09-01T06:31:34.674Z","comments":true,"path":"2022/09/01/软件设计师/计算机基本工作原理/6/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/6/","excerpt":"","text":"机器字长为n位的二进制数可以用补码来表示（）不同的有符号定点小数 A、2^n B、2^(n-1) C、2^n - 1 D、2^(n-1) + 1 解析选A 补码本身是带符号位的，补码表示的数字中0是唯一的，不像原码有+0和-0之分。 因此n位进制编码表示 2^n 个不同的数","categories":[{"name":"计算机基本工作原理","slug":"计算机基本工作原理","permalink":"https://pan-jf.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"补码","slug":"补码","permalink":"https://pan-jf.github.io/tags/%E8%A1%A5%E7%A0%81/"}]},{"title":"CPU是在（）结束时响应DMA请求的","slug":"软件设计师/输入输出系统/2","date":"2022-09-01T08:55:22.000Z","updated":"2022-09-01T06:38:57.175Z","comments":true,"path":"2022/09/01/软件设计师/输入输出系统/2/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/2/","excerpt":"","text":"CPU是在（）结束时响应DMA请求的 A、一条指令执行 B、一段程序 C、一个时钟周期 D、一个总线周期 解析选D DMA控制器在需要的时候代替CPU作为总线主设备，在不受CPU干预的情况下，控制IO设备与系统主存之间的直接数据传输。 DMA操作占用的资源是系统总线，而CPU并非在整个指令执行期间即指令周期内都会使用总线 故DMA请求的检测点设置在每个机器周期也就是总线周期结束时执行，这样使得总线利用率最高。","categories":[{"name":"输入输出系统","slug":"输入输出系统","permalink":"https://pan-jf.github.io/categories/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"DMA","slug":"DMA","permalink":"https://pan-jf.github.io/tags/DMA/"}]},{"title":"暂存运算结果的寄存器是（）","slug":"软件设计师/计算机基本工作原理/4","date":"2022-09-01T08:53:22.000Z","updated":"2022-09-01T06:58:42.981Z","comments":true,"path":"2022/09/01/软件设计师/计算机基本工作原理/4/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/4/","excerpt":"","text":"在CPU中，常用来为ALU执行算术逻辑运算提供数据并暂存运算结果的寄存器是（） A、程序计数器 B、状态寄存器 C、通用寄存器 D、累加寄存器 解析选D 在运算器中，累加寄存器是专门存放算术或逻辑运算的一个操作数和运算结果的寄存器，能进行加，减，读出，移位，循环移位和求补等操作。是运算器的主要部分。","categories":[{"name":"计算机基本工作原理","slug":"计算机基本工作原理","permalink":"https://pan-jf.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"累加寄存器","slug":"累加寄存器","permalink":"https://pan-jf.github.io/tags/%E7%B4%AF%E5%8A%A0%E5%AF%84%E5%AD%98%E5%99%A8/"}]},{"title":"常见的虚拟存储器由（）两级存储器组成","slug":"软件设计师/存储系统/2","date":"2022-09-01T08:43:22.000Z","updated":"2022-09-01T06:57:30.175Z","comments":true,"path":"2022/09/01/软件设计师/存储系统/2/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/2/","excerpt":"","text":"常见的虚拟存储器由（）两级存储器组成 A、主存-辅存 B、主存-网盘 C、cache-主存 D、cache-硬盘 解析选A 在具有层次结构存储器的计算机中，虚拟存储器是为用户提供一个比主存储器大得多的可随机访问的地址空间的技术。 虚拟存储技术使辅助存储器和主存储器密切配合。 对用户来说，好像计算机具有一个比实际主存大得多的主存可供使用，因此成为虚拟存储器。 虚拟存储器的地址称为虚地址或逻辑地址。","categories":[{"name":"存储系统","slug":"存储系统","permalink":"https://pan-jf.github.io/categories/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"存储器","slug":"存储器","permalink":"https://pan-jf.github.io/tags/%E5%AD%98%E5%82%A8%E5%99%A8/"},{"name":"主存","slug":"主存","permalink":"https://pan-jf.github.io/tags/%E4%B8%BB%E5%AD%98/"}]},{"title":"主存地址与cache地址之间的转换工作由（）完成","slug":"软件设计师/存储系统/1","date":"2022-09-01T08:20:22.000Z","updated":"2022-09-01T06:57:41.645Z","comments":true,"path":"2022/09/01/软件设计师/存储系统/1/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/1/","excerpt":"","text":"位于CPU与主存之间的高速缓冲存储器（Cache）用于存放部分主存数据的拷贝，主存地址与cache地址之间的转换工作由（）完成 A、硬件 B、软件 C、用户 D、程序员 解析选A 从cache-主存层次实现的目标看 既要使CPU的访存速度接近于访cache的速度 用户程序提供的运行空间应保持为主存容量大小的存储空间 在采用cache-主存层次的系统中，cache对用户程序而言是透明的。也就是说，用户程序可以不需要知道cache的存在。因此，CPU每次访存时，依然和未使用cache的情况一样，给出的是一个主存地址。 但在cache-主存结构中，CPU首先访问的是cache，并不是主存。为此，需要一种机制将CPU的访主存地址转换成访cache地址，这个处理过程对速度要求非常高，因此其是完全由硬件来完成。","categories":[{"name":"存储系统","slug":"存储系统","permalink":"https://pan-jf.github.io/categories/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"存储器","slug":"存储器","permalink":"https://pan-jf.github.io/tags/%E5%AD%98%E5%82%A8%E5%99%A8/"},{"name":"Cache","slug":"Cache","permalink":"https://pan-jf.github.io/tags/Cache/"},{"name":"主存","slug":"主存","permalink":"https://pan-jf.github.io/tags/%E4%B8%BB%E5%AD%98/"}]},{"title":"将指令中的地址码送入（）","slug":"软件设计师/计算机基本工作原理/3","date":"2022-09-01T08:10:22.000Z","updated":"2022-09-01T06:58:30.191Z","comments":true,"path":"2022/09/01/软件设计师/计算机基本工作原理/3/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/3/","excerpt":"","text":"若某条无条件转移汇编指令采用直接寻址，则该指令的功能是将指令中的地址码送入（） A、程序计数器（PC） B、地址寄存器（AR） C、累加器（AC） D、算术逻辑运算单元（ALU） 解析选A 程序计数器是用于存放下一条指令所在单元地址的地方。 在程序执行前，必须将程序的起始地址，即程序的一条指令所在的内存单元地址送入程序计数器。 当执行命令时，CPU将自动修改程序计数器的内容，即每执行一条指令，程序计数器增加一个量，使其指向下一个待指向的指令。 程序的转移等操作也是通过该寄存器来实现的。 其他选项解析 地址寄存器一般用来保存当前CPU所访问的内存单元的地址，以方便对内存的读写操作。 累加器是专门存放算术或者逻辑运算的一个操作数和运算结果的寄存器 ALU是CPU的执行单元，主要负责运算工作","categories":[{"name":"计算机基本工作原理","slug":"计算机基本工作原理","permalink":"https://pan-jf.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"程序计数器","slug":"程序计数器","permalink":"https://pan-jf.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"}]},{"title":"在CPU中用于跟踪指令地址的寄存器是（）","slug":"软件设计师/计算机基本工作原理/2","date":"2022-09-01T06:09:22.000Z","updated":"2022-09-01T06:58:14.940Z","comments":true,"path":"2022/09/01/软件设计师/计算机基本工作原理/2/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/2/","excerpt":"","text":"在CPU中用于跟踪指令地址的寄存器是（） A、地址寄存器（MAR） B、数据寄存器（MDR） C、程序计数器（PC） D、指令寄存器（IR） 解析选C 程序计数器是用于存放下一条指令所在单元地址的地方。 在程序执行前，必须将程序的起始地址，即程序的一条指令所在的内存单元地址送入程序计数器。 当执行命令时，CPU将自动修改程序计数器的内容，即每执行一条指令，程序计数器增加一个量，使其指向下一个待指向的指令。 程序的转移等操作也是通过该寄存器来实现的。 因此CPU中跟踪指令地址的是程序计数器（PC）。 其他选项解析 指令寄存器一般是用来保存当前正在执行的一条指令 数据寄存器主要是用来保存操作数和运算结果等信息的，其目的是为了节省读取操作数所需占用总线和访问存储器的时间。 地址寄存器一般用来保存当前CPU所访问的内存单元的地址，以方便对内存的读写操作。","categories":[{"name":"计算机基本工作原理","slug":"计算机基本工作原理","permalink":"https://pan-jf.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"程序计数器","slug":"程序计数器","permalink":"https://pan-jf.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"},{"name":"寄存器","slug":"寄存器","permalink":"https://pan-jf.github.io/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"}]},{"title":"输入输出控制方法中，采用（）无需CPU干预","slug":"软件设计师/输入输出系统/1","date":"2022-09-01T05:49:22.000Z","updated":"2022-09-01T06:59:06.390Z","comments":true,"path":"2022/09/01/软件设计师/输入输出系统/1/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/1/","excerpt":"","text":"在输入输出控制方法中，采用（）可以使得设备与主存间的数据块传送无需CPU干预。 A、程序控制输入输出 B、中断 C、DMA D、总线控制 解析选C 计算机中主机与外设间进行数据传输的输入输出控制方法有程序控制方式、中断方式、DMA等。 程序控制方式在程序控制方式下，由CPU执行程序控制数据的输入输出过程。 中断方式在中断方式下，外设准备好输入数据或接收数据时向CPU发出中断请求信号，则暂停正在执行的任务。若CPU决定响应该请求，则暂停正在执行的任务，转而执行中断服务程序进行数据的输入输出处理，之后再回去执行原来被中断的任务。 DMA在DMA方式下，CPU只需向DMA控制器下达指令，让DMA控制器来处理数据的传送，数据传送完毕再把信息反馈给CPU，这样就很大程度上减轻CPU的负担，可以大大节省系统资源","categories":[{"name":"输入输出系统","slug":"输入输出系统","permalink":"https://pan-jf.github.io/categories/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"DMA","slug":"DMA","permalink":"https://pan-jf.github.io/tags/DMA/"}]},{"title":"为实现程序指令的顺序执行，CPU（）中的值将自动加1","slug":"软件设计师/指令系统和计算机体系结构/2","date":"2022-09-01T05:08:22.000Z","updated":"2022-09-01T06:59:24.450Z","comments":true,"path":"2022/09/01/软件设计师/指令系统和计算机体系结构/2/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/2/","excerpt":"","text":"为实现程序指令的顺序执行，CPU（）中的值将自动加1 A、指令寄存器（IR） B、程序计数器（PC） C、地址寄存器（AR） D、指令译码器（ID） 解析选B CPU执行指令过程 当执行一条指令时，先把它从内存取到数据寄存器（DR）中，然后再传送至 指令寄存器（IR）。 指令寄存器（IR）保存当前正在执行的指令,然后再传送至指令译码器（ID）。 为了执行任何给定的指令，指令译码器（ID）对操作码进行译码，并向操作控制器发出具体操作的特定信号。 在操作期间，地址寄存器（AR）用来保存当前CPU所访问的内存单元的地址。由于在内存和CPU之间存在着操作速度上的差别，所以必须使用地址寄存器来保持地址信息，直到内存的读写操作完成为止。 为了保证程序指令能够连续地执行下去，程序计数器（PC）来确定下一条指令的地址，所以又称为指令计数器。 程序计数器工作过程 在程序开始执行前，必须将它的起始地址，即程序的一条指令所在的内存单元地址送入PC，因此程序计数器（PC）的内容即是从内存提取的第一条指令的地址。 当执行指令时，CPU将自动修改PC的内容，即每执行一条指令PC增加一个量，这个量等于指令所含的字节数，以便使其保持的总是将要执行的下一条指令的地址。 由于大多数指令都是按顺序来执行的，所以修改的过程通常只是简单的对PC加1","categories":[{"name":"指令系统和计算机体系结构","slug":"指令系统和计算机体系结构","permalink":"https://pan-jf.github.io/categories/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"程序计数器","slug":"程序计数器","permalink":"https://pan-jf.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"}]},{"title":"以下关于CPU的叙述中，错误的是（）","slug":"软件设计师/指令系统和计算机体系结构/1","date":"2022-09-01T04:43:22.000Z","updated":"2022-09-01T03:53:23.998Z","comments":true,"path":"2022/09/01/软件设计师/指令系统和计算机体系结构/1/","link":"","permalink":"https://pan-jf.github.io/2022/09/01/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/1/","excerpt":"","text":"以下关于CPU的叙述中，错误的是（） A、CPU产生每条指令的操作信号并将操作信号送往相应的部件进行控制 B、程序计数器PC除了存放指令地址，也可以临时存储算术/逻辑运算结果 C、CPU中的控制器决定计算及运行过程的自动化 D、指令译码器是CPU控制器中的部件 解析选B CPU是计算机的控制中心，主要由运算器、控制器、寄存器组和内部总线等部件组成。 控制器控制器由程序计数器、指令寄存器、指令译码器、时序产生器和操作控制器组成，它是发布命令的“决策机构”。即完成协调和指挥整个计算机系统的操作。 它的主要功能有： 从内存中取出一条指令，并指出下一条指令在内存中的位置 对指令进行编码或者测试，并产生相应的操作控制信号，以便启动规定的动作 指挥并控制CPU、内存和输入输出设备之间数据的流动 程序计数器程序计数器（PC）是专用寄存器，具有寄存信息和计数两种功能，又称为指令计数器。 在程序开始执行前，将程序的起始地址送入PC，该地址在程序加载到内存时确定，因此PC的初始内容即是第一条指令的地址。 执行指令时，CPU将自动修改PC的内容，以便使其保持的总是将要执行的下一条指令的地址。 由于大多数指令都是按顺序执行的，因此修改的过程通常只是简单地对PC加1。 当遇到转移指令时，后继指令的地址根据当前指令的地址加上一个向前或向后转移的位移量得到，或者根据转移指令给出的直接转移的地址得到。","categories":[{"name":"指令系统和计算机体系结构","slug":"指令系统和计算机体系结构","permalink":"https://pan-jf.github.io/categories/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"}]},{"title":"海明检验码——n与k的关系是（）","slug":"软件设计师/计算机基本工作原理/1","date":"2022-08-31T15:30:00.000Z","updated":"2022-09-01T06:57:55.076Z","comments":true,"path":"2022/08/31/软件设计师/计算机基本工作原理/1/","link":"","permalink":"https://pan-jf.github.io/2022/08/31/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/1/","excerpt":"","text":"海明检验码是在n个数据位之外增设k个校验位，从而形成一个k+n位的新的码字，使新的码字的码距比较均匀地拉大。n与k的关系是（）A、2^k - 1 &gt;= n + k B、2^n - 1 &lt;= n+k C、n=k D、n-1 &lt;= k 解析：选A 海明码是一种多重（复式）奇偶检错编码。 它将信息用逻辑形式编码，以便能检错和纠错。 用在海明码中的全部传输码字是由原来的信息和附加的奇偶检验位组成的。 每一个这种奇偶位被编在传输码字的特定位置上。 推导并使用长度为n位的码字的海明码，所需步骤如下： 确定最小的校验位数k，将他们记成D1、D2、… 、Dk,每个校验位符合不同的奇偶测试规定。 原有信息和k个校验位一起编成长为n+k位的新码字。选择k检验位（0或者1）需满足必要的奇偶条件。 对所接收的信息作所需的k个奇偶检查。 如果所有的奇偶检查结果均正确，则认为信息无错误。如果发现一个或多个错了，则错误的位由这些检查的结果来唯一地确定。求海明码时的一项基本考虑是确定所需最少的校验位数k。考虑长度为n位的信息，且附加了k个校验位，则所发送的总长度为n+k。在接收器中要进行k个奇偶检查，每个检查结果或是真或是假。这个奇偶检查的结果可以表示为一个k位的二进制，它可以确定最多2^k种不同状态。这些状态中必有一个其所有奇偶测试都是真的，它便是判定信息正确的条件。于是剩下的（2^k-1）种状态，可以用来判断误码的位置，于是导出以下关系：2^k-1&gt;=n+k","categories":[{"name":"计算机基本工作原理","slug":"计算机基本工作原理","permalink":"https://pan-jf.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"海明检验码","slug":"海明检验码","permalink":"https://pan-jf.github.io/tags/%E6%B5%B7%E6%98%8E%E6%A3%80%E9%AA%8C%E7%A0%81/"}]},{"title":"hexo","slug":"hexo","date":"2022-08-23T03:45:22.000Z","updated":"2022-09-01T02:12:44.733Z","comments":true,"path":"2022/08/23/hexo/","link":"","permalink":"https://pan-jf.github.io/2022/08/23/hexo/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://pan-jf.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://pan-jf.github.io/tags/hexo/"}]}],"categories":[{"name":"计算机基本工作原理","slug":"计算机基本工作原理","permalink":"https://pan-jf.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"},{"name":"输入输出系统","slug":"输入输出系统","permalink":"https://pan-jf.github.io/categories/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"},{"name":"存储系统","slug":"存储系统","permalink":"https://pan-jf.github.io/categories/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"},{"name":"指令系统和计算机体系结构","slug":"指令系统和计算机体系结构","permalink":"https://pan-jf.github.io/categories/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"},{"name":"hexo","slug":"hexo","permalink":"https://pan-jf.github.io/categories/hexo/"}],"tags":[{"name":"总线","slug":"总线","permalink":"https://pan-jf.github.io/tags/%E6%80%BB%E7%BA%BF/"},{"name":"补码","slug":"补码","permalink":"https://pan-jf.github.io/tags/%E8%A1%A5%E7%A0%81/"},{"name":"CPU","slug":"CPU","permalink":"https://pan-jf.github.io/tags/CPU/"},{"name":"DMA","slug":"DMA","permalink":"https://pan-jf.github.io/tags/DMA/"},{"name":"累加寄存器","slug":"累加寄存器","permalink":"https://pan-jf.github.io/tags/%E7%B4%AF%E5%8A%A0%E5%AF%84%E5%AD%98%E5%99%A8/"},{"name":"存储器","slug":"存储器","permalink":"https://pan-jf.github.io/tags/%E5%AD%98%E5%82%A8%E5%99%A8/"},{"name":"主存","slug":"主存","permalink":"https://pan-jf.github.io/tags/%E4%B8%BB%E5%AD%98/"},{"name":"Cache","slug":"Cache","permalink":"https://pan-jf.github.io/tags/Cache/"},{"name":"程序计数器","slug":"程序计数器","permalink":"https://pan-jf.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"},{"name":"寄存器","slug":"寄存器","permalink":"https://pan-jf.github.io/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"},{"name":"海明检验码","slug":"海明检验码","permalink":"https://pan-jf.github.io/tags/%E6%B5%B7%E6%98%8E%E6%A3%80%E9%AA%8C%E7%A0%81/"},{"name":"hexo","slug":"hexo","permalink":"https://pan-jf.github.io/tags/hexo/"}]}